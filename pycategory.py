# -*- coding: utf-8 -*-
"""
Created on Sun Jun 14 10:35:24 2020

@author: user
"""


class Categories:
    #inicialize
    initial_categories=['expense', ['food', ['meal', 'snack', 'drink'],\
                         'transportation', ['bus', 'railway']],\
                          'income', ['salary', 'bonus']]
        
    def __init__(self,categories=initial_categories):
        self._categories=categories

# =============================================================================
#     def view_categories(self,level=0):
#         if self._categories== None:
#             return
#         if type(self._categories) in (tuple, list):
#             for subcategories in self._categories:
#                 subcategories=Categories(subcategories)
#                 subcategories.view_categories(level+1)
#         else:
#             print(f'{" "*2*(level-1)}- {self._categories}')
# =============================================================================            
    def view_categories(self,level=0): 
        if self._categories== None:
            return
        if type(self._categories) in (tuple, list):
            for subcategories in self._categories:
                subcategories=Categories(subcategories)
                for child in subcategories.view_categories(level+1):
                    yield child
        else:
            print(f'{" "*2*(level-1)}- {self._categories}')
            yield f'{" "*2*(level-1)}- {self._categories}'

    def is_category_valid(self, category):        
        def flatten(categories):
            if type(categories) in (tuple ,list):
                result=[]
                for i,v in enumerate(categories):
                    result.extend(flatten(v))
                return result
            else:
                return [categories]
        flattened_categories=flatten(self._categories)
        return category in flattened_categories
    
# =============================================================================
#     def find_subcategories(self, category):
#         if type(self._categories) == list:
#             for v in self._categories:
#                 v=Categories(v)
#                 p = v.find_subcategories(category)
#                 if p == True:
#                     index = self._categories.index(v._categories)
#                     if index + 1 < len(self._categories) and \
#                             type(self._categories[index + 1]) == list:
#                         temp_class=Categories(self._categories[index:index + 2])
#                         return temp_class.flatten()
#                     else:
#                         # return only itself if no subcategories
#                         return v._categories
#                 if p != []:
#                     return p
#         # return [] instead of False if not found
#         return True if self._categories == category else []
# =============================================================================
    def find_subcategories(self, category):
        def find_subcategories_gen(category, categories, found=False):
            if type(categories) == list:
                for index, child in enumerate(categories):
                    yield from find_subcategories_gen(category, child, found)
                    if child == category and index + 1 < len(categories) \
                        and type(categories[index + 1]) == list:
                        # When the target category is found,
                        # recursively call this generator on the subcategories
                        # with the flag set as True.
                        yield from find_subcategories_gen(category, \
                                            categories[index + 1], True)
            else:
                if categories == category or found==True:
                    yield categories
        
        return list(find_subcategories_gen(category, \
                            self._categories, found=False))
        # A list generated by find_subcategories_gen(category, self._categories)

